- per WireShark (http://www.wireshark.org/download.html) Datenaustausch zwischen Browser und Server mitschneiden: (wow.dmp)

damit ergeben sich folgende Parameter fuer die Abfrage, um XML Code zu bekommen:

User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; rv:1.9.1b3pre) Gecko/20090218 Firefox/3.0 SeaMonkey/2.0a3pre

{----------------optional------------------------------------------------
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: de-de,de;q=0.8,en-us;q=0.5,en;q=0.3
Accept-Charset: ISO-8859-15,utf-8;q=0.7,*;q=0.7

Accept-Encoding: gzip,deflate		(gepackte Daten)
oder
Accept-Encoding: identity			(ungepackte Daten)
------------------------------------------------------------------------}

			URLConnection urlConn = url.openConnection();
			urlConn.addRequestProperty( "User-Agent", "Firefox/3.0" );

			//optional
			urlConn.addRequestProperty( "Accept-Encoding", packed ? "gzip,deflate" : "identity" );

			...

			//-----------funktioniert nicht!?-----------
			// String line = null;
			// while ((line = br.readLine()) != null) {
			// sb.append( line );
			// }
			//-------------------------------------

statt dessen: 		

			char chars[] = new char[1024];
			int len = 0;
			while ((len = br.read( chars, 0, chars.length )) >= 0) {
				sb.append( chars, 0, len );
			}
------------------------------
-------- db4o -----------


- moegliche Erweiterungen:

	public class BitmapTranslator implements ObjectConstructor {

		public Object onInstantiate(ObjectContainer container,
				Object storedObject) {
			try {
				return storedObject;
			} catch (RuntimeException e) {
				throw new Db4oException(e);
			}
		}

		public void onActivate(ObjectContainer container,
				Object applicationObject, Object storedObject) {
			Log.i("onActivate()",applicationObject + "__" + storedObject );
		}

		public Object onStore(ObjectContainer container,
				Object applicationObject) {
			try {
				return applicationObject;
			} catch (RuntimeException e) {
				throw new ObjectNotStorableException(e.getMessage());
			}
		}

		public Class storedClass() {
			return String.class;
		}

	}

//				Configuration configuration = db.ext().configure();
//				configuration.objectClass( "WOWCharacter" ).cascadeOnUpdate( true );
//				configuration.objectClass( "WOWCharacter" ).cascadeOnDelete( true );
//				ObjectClass oc = configuration.objectClass( "WOWCharacter" );
//				oc.minimumActivationDepth( 20 );
				
//				Configuration conf = db.ext().configure();
//				conf.objectClass(WOWCharacter.class).updateDepth(2);
//				conf.activationDepth(5);
//				conf.objectClass(Bitmap.class).translate(
//						new BitmapTranslator());
//				conf.objectClass(WOWCharacter.class).cascadeOnUpdate(true);
//				conf.objectClass(WOWCharacter.class).cascadeOnActivate(true);

	/**
	 * 
	 */
	public void testDB4o() {
		try {
			db = Db4o.openFile(dbName);
			deleteAll();
			Log.i("db4o", "db4o version: " + Db4o.version());
			WOWCharacter c = new WOWCharacter();
			c.put("NAME", "Stefan");
			c.put("REALM", "Lothar");
			c.put("REGION", "EU");
			c.put("CLASS", "Class_Stefan");
			c.put("LEVEL", new Integer(80));
			c.put("XML", "XML_Stefan");
			db.store(c);
			c = new WOWCharacter();
			c.put("NAME", "Thomas");
			c.put("REALM", "Server1");
			c.put("REGION", "EU");
			c.put("CLASS", "Class_Thomas");
			c.put("LEVEL", new Integer(20));
			c.put("XML", "XML_Thomas");
			db.store(c);
			c = new WOWCharacter();
			c.put("NAME", "Goran");
			c.put("REALM", "Lothar");
			c.put("REGION", "US");
			c.put("CLASS", "Class_Goran");
			c.put("LEVEL", new Integer(5));
			c.put("XML", "XML_Goran");
			db.store(c);
			c = new WOWCharacter();
			c.put("NAME", "Anton");
			c.put("REALM", "Server3");
			c.put("REGION", "US");
			c.put("CLASS", "Class_Wincent");
			c.put("LEVEL", new Integer(40));
			c.put("XML", "XML_Wincent");
			db.store(c);
			Log.i("db4o", "...stored characters: ");
			WOWCharacter proto = new WOWCharacter();// alle Objekte
			ObjectSet<WOWCharacter> result = db.queryByExample(proto);
			listResult(result);
			Log.i("db4o", "...get object(s) (Name = Thomas): ");
			result = get("NAME", "Thomas");
			listResult(result);
			// TODO Sort-Direction
		} catch (DatabaseClosedException e1) {
			Log.e("db4o", e1.toString());
		} catch (DatabaseReadOnlyException e1) {
			Log.e("db4o", e1.toString());
		} finally {
			db.close();
		}
	}

-------- SD Card -------

//		File root = Environment.getExternalStorageDirectory();
//		if (root.canWrite()) {
//			//OK
//		} else {
//			Log.i(getClass().getName(), "SD-Card ist schreibgeschuetzt!");
//		}

------- Speichern von Media Daten (die ohne weiteres nicht per db4o persistierbar sind) ------

//		String uri = android.provider.MediaStore.Images.Media.insertImage(activity.getContentResolver(), bm, keyIcon, "icon for " + key);
//		character.put( "ICON", uri );


//			Object o = character.get( "ICON" );
//			if (o != null) {
//				Uri imageUri =  Uri.parse(o.toString());
//				Bitmap icon;
//				try {
//					icon = android.provider.MediaStore.Images.Media.getBitmap(context.getContentResolver(), imageUri );
//					ImageView charImage = (ImageView)row.findViewById( R.id.CharImage );
//					charImage.setImageBitmap( icon );
//				} catch (FileNotFoundException e) {
//				} catch (IOException e) {
//				}
//			}
-------- Renderer -----
			// GradientDrawable d = new GradientDrawable(
			// GradientDrawable.Orientation.BL_TR, new int[] { Color.GRAY,
			// Color.LTGRAY });
			// d.setCornerRadius(3f);
			// row.setBackgroundDrawable(d);
