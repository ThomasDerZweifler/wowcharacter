	@Override
	public boolean onKeyDown(int keyCode, KeyEvent ev) {

		switch (keyCode) {
		case KeyEvent.KEYCODE_BACK:
	        setResult(RESULT_CANCELED);
	        finish();
			break;
		default:
			return false;
		}
		return true;
	}
	
	--------- Applikation beenden ----------
		int pid = android.os.Process.myPid();
		android.os.Process.killProcess(pid);
		
	---------- Timer -------
		Timer timer = new Timer("WOW-Timer");
		TimerTask timerTask = new TimerTask() {
			public void run() {
				goToCharacterList();
			}
		};
		timer.schedule(timerTask, 5000);
	---------- xml ---------
	/**
	 * XML auswerten
	 * 
	 * @param xmlString
	 */
	public void interpretXML( String xmlString ) {
		StringReader inStream = new StringReader( xmlString );
		InputSource inSource = new InputSource( inStream );
		Document doc = null;
		try {
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			// dbf.setValidating( false );
			// dbf.setNamespaceAware( false );
			doc = db.parse( inSource );
			// Demo TODO Auswerten (DTD evtl. nutzen), Bilder laden etc.
			NodeList nodeList = doc.getElementsByTagName( "character" );
			Node node = nodeList.item( 0 );
			NamedNodeMap nodesMap = node.getAttributes();
			// tv.setText(node.getLocalName());
			for (int i = 0; i < nodesMap.getLength(); i++) {
				Node n = nodesMap.item( i );
				// tv.append(n.getNodeName() + ": " + n.getNodeValue() + "; ");
			}
		} catch (SAXException e) {
			Log.e( "Search", "SAX" + e.getMessage() );
		} catch (IOException e) {
			Log.e( "Search", "URI" + e.getMessage() );
		} catch (ParserConfigurationException e) {
			Log.e( "Search", "Parser Implementation" + e.getMessage() );
		}
	}
	------------ ListViewBackground -------------------
		setListAdapter(new ArrayAdapter<WOWCharacter>(this,
				android.R.layout.simple_list_item_1, a) {
			@Override
			public View getView(int position, View convertView, ViewGroup parent) {
				View view = super.getView(position, convertView, parent);
				// Drawable d = Model.getInstance().rowBackground;
				// view.setBackgroundDrawable( d );
				GradientDrawable d = new GradientDrawable(
						GradientDrawable.Orientation.BL_TR, new int[] {
								Color.GRAY, Color.LTGRAY });
				d.setCornerRadius(3f);
				view.setBackgroundDrawable(d);
				return view;
			}
		});
	
	------------ ViewFlipper -------------------

		//setContentView( R.layout.splash );
		//View splash = findViewById( R.id.splash );
		//setContentView( v );
		viewFlipper.addView( splash );

		//besser, weil setContentView(R.layout.splash) nur einmal funktioniert, da Initialisierung
		LayoutInflater inflater = getLayoutInflater();
		View splash = inflater.inflate(R.layout.splash, null);
		viewFlipper.addView( splash );


		viewFlipper.setInAnimation( AnimationUtils.loadAnimation( this, R.anim.rotate ) );
		viewFlipper.setOutAnimation( AnimationUtils.loadAnimation( this, R.anim.slide_left_out ) );
		viewFlipper.setFlipInterval( 2000 );
		viewFlipper.startFlipping();	